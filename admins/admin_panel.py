from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config_reader import config
from keyboard.inline import (adm_inl_panel, adm_inl_cancel, adm_inl_deladm, adm_inl_notifMain)
from data.database import DB_Users
from utils.states import Admin

router = Router()

#–æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@router.callback_query(F.data == "adm_cancel")
async def cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await callback.message.edit_text("‚ö†Ô∏è–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                         reply_markup=adm_inl_panel)
    await state.clear()


#—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data == "list_admins")
async def list_admins(callback: CallbackQuery):
    await callback.answer("")
    data = await DB_Users.admins_list()
    text = '\n'.join((f"{data.index(adm)+1}. Name: <i>{adm[1]}</i>, UserName: <i>{adm[2]}</i>, ID: <i>{adm[0]}</i>" for adm in data))
    
    await callback.message.edit_text("<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n" + text,
                                     reply_markup=adm_inl_deladm)


#—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "del_admin")
async def del_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(Admin.num_del_admin)
    
    data = await DB_Users.admins_list()
    text = '\n'.join((f"{data.index(adm)+1}. Name: <i>{adm[1]}</i>, UserName: <i>{adm[2]}</i>, ID: <i>{adm[0]}</i>" for adm in data))
    
    await callback.message.edit_text(text + "\n\n<b>ü§ñ–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:</b>", 
                                     reply_markup=adm_inl_cancel)

@router.message(Admin.num_del_admin, F.text)
async def del_admin_num(message: Message, state: FSMContext):
    await state.update_data(num_del_admin=message.text)
    data = await state.get_data()
    await state.clear()
    builder = InlineKeyboardBuilder()
    
    try:
        adm_data = await DB_Users.admins_list()
        adm = adm_data[int(data["num_del_admin"])-1]
        builder.button(
            text="‚ùå–£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_admin:{adm[0]}"
        )
        builder.button(
            text="‚úÖ–û—Ç–º–µ–Ω–∞", 
            callback_data="adm_cancel"
        )
        builder.adjust(2)
        await message.reply(f"<b>–¢—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:</b>\n\n–ò–º—è: <i>{adm[1]}</i>, —é–∑: <i>{adm[2]}</i>, id: <i>{int(adm[0])}</i>",
                            reply_markup=builder.as_markup())
    except Exception as e:
        # print(e)
        await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≥–æ‚ÄºÔ∏è\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                        reply_markup=adm_inl_panel)

@router.callback_query(F.data.startswith("delete_admin:"))
async def delete_admin_end(callback: CallbackQuery):
    await callback.answer()
    parts = callback.data.split(":")
    tg_id = int(parts[1])
    
    user = await DB_Users.select_admin(tg_id)
    name, username = user[1], (user[2] if user[2] else "‚Äî")

    if tg_id == int(config.admin_id.get_secret_value()):
        await callback.message.edit_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ÄºÔ∏è\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                        reply_markup=adm_inl_panel)
        return 0

    try:
        await DB_Users.delete_admin(tg_id)
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (@{username}) –±—ã–ª —É–≤–æ–ª–µ–Ω —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                                         reply_markup=adm_inl_panel)
    except:
        await callback.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≥–æ‚ÄºÔ∏è\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                        reply_markup=adm_inl_panel)


#—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.callback_query(F.data == "notification")
async def notification(callback: CallbackQuery):
    await callback.answer("")
    
    await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:</b>\n\n",
                                     reply_markup=adm_inl_notifMain)