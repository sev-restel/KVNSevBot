from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from math import ceil
from datetime import datetime
from keyboard.inline import (adm_inl_panel, adm_inl_cancel, adm_inl_approveNotif)
from data.database import DB_Notification
from utils.states import Notif
from utils.help_func import valid_date, generate_id
from handlers.spam import send_notif
from config import bot

router = Router()

error_text_start = "‚ö†Ô∏èError: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
error_text_date = "‚ö†Ô∏èError: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
date_text = f"–û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º <b>–¥–∞—Ç—É</b> —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {datetime.now().replace(second=0, microsecond=0)} (–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã) –∏–ª–∏ \"<b>-</b>\" –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ:"
text_text = "–û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º <b>—Ç–µ–∫—Å—Ç</b> —Ä–∞—Å—Å—ã–ª–∫–∏ (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º):"
photo_text = "–ï—Å–ª–∏ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å <b>—Ñ–æ—Ç–æ</b> —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ <b>–Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>, –ª–∏–±–æ \"<b>-</b>\" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:"
date_text_edit = f"–û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç –Ω–æ–≤—É—é <b>–¥–∞—Ç—É</b> —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {datetime.now().replace(second=0, microsecond=0)} (–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã) –∏–ª–∏ \"<b>-</b>\" –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ:"
text_text_edit = "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π <b>—Ç–µ–∫—Å—Ç</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
photo_text_edit = "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ <b>—Ñ–æ—Ç–æ</b>, –ª–∏–±–æ \"<b>-</b>\" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:"

@router.callback_query(F.data.startswith("list_notif"))
async def list_notification(callback: CallbackQuery):
    await callback.answer("")

    #o–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    parts = callback.data.split(":")
    page = int(parts[1]) if len(parts) == 2 and parts[1].isdigit() else 0
    per_page = 3

    notif_list = await DB_Notification.get_all_notification() # id_notif, text, date, is_active, photo
    total = len(notif_list)
    pages = ceil(total / per_page)

    if total == 0:
        await callback.message.edit_text("‚ö†Ô∏è–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", 
                                         reply_markup=adm_inl_panel)
        return

    #—Å–ª–∞–π—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = page * per_page
    end = start + per_page
    current_page_items = notif_list[start:end]

    output = f"<b>üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({total} —à—Ç.) ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages}</b>\n\n"
    for notif in current_page_items:
        output += (
            f"üÜî <code>{notif[0]}</code>\n"
            f"üóìÔ∏è <i>{notif[2]}</i>\n"
            f"üìé –§–æ—Ç–æ: {'‚úÖ' if notif[4] else '‚ùå'}\n"
            f"‚òëÔ∏è –ê–∫—Ç–∏–≤–Ω–æ: {"‚úÖ" if notif[3] == 1 else "‚ùå"}\n"
            f"üîπ {notif[1][:150]}{'...' if len(notif[1]) > 150 else ''}\n\n"
        )

    #–∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ #.adjust(2, *[1] * 2) - –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å
    keyboard = InlineKeyboardBuilder()
    if page > 0:
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_notif:{page - 1}")
    if end < total:
        keyboard.button(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"list_notif:{page + 1}")
    keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç./–ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data="adm_cancel")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="adm_cancel")
    keyboard.adjust(2)

    await callback.message.edit_text(output, reply_markup=keyboard.as_markup())


#–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "add_notif")
async def add_notif(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(Notif.notif_text)
    
    await callback.message.edit_text(f"{text_text}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.notif_text, F.text)
async def add_notif_text(message: Message, state: FSMContext):
    await state.update_data(notif_text = message.html_text)
    await state.set_state(Notif.notif_date)
    
    await message.answer(f"{date_text}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.notif_text, ~F.text)
async def not_add_notif_text(message: Message):
    await message.answer(f"{error_text_start}{text_text}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.notif_date, F.text)
async def add_notif_data(message: Message, state: FSMContext):
    date = message.text
    if date.strip() == "-":
        date = "0000-00-00 00:00"
    elif not(await valid_date(date)):
        await message.reply(f"{error_text_date}{date_text}", 
                                     reply_markup=adm_inl_cancel)
        return
    
    await state.update_data(notif_date = date)
    await state.set_state(Notif.notif_photo)

    await message.answer(f"{photo_text}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.notif_date, ~F.text)
async def add_notif_data(message: Message):
    await message.reply(f"{error_text_start}{date_text}", 
                        reply_markup=adm_inl_cancel)


@router.message(Notif.notif_photo)
async def add_notif_photo(message: Message, state: FSMContext):
    try:
        if message.text and message.text.strip() == "-":
            await state.update_data(notif_photo = None)
        elif message.photo:
            await state.update_data(notif_photo = message.photo[-1].file_id)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except Exception as e:
        await message.reply(f"{error_text_start}{photo_text}", 
                                     reply_markup=adm_inl_cancel)
        return
    
    await state.set_state(Notif.notif_preview)
    
    #–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    await preview_notification(message, state)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –≤ –ø—Ä–µ–≤—å—é

@router.callback_query(F.data == "approve_notif")
async def approve_notification(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    
    data = await state.get_data()
    await state.clear()

    try:
        for _ in range(10):
            new_id = await generate_id()
            if not await DB_Notification.is_id_exists(new_id):
                break
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫")
        
        dop_text = ""
        
        if data["notif_date"] == "0000-00-00 00:00":
            await DB_Notification.add_notification(new_id, data["notif_text"], data["notif_date"], False, data["notif_photo"])
            
            valid_data_spam = [0, data["notif_text"], data["notif_date"], 0, data["notif_photo"]]
            await send_notif(bot, valid_data_spam)
            
            dop_text = " –∏ –±—ã–ª–æ –æ—Ç–æ—Å–ª–∞–Ω–æ <b>–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>"
        else:
            await DB_Notification.add_notification(new_id, data["notif_text"], data["notif_date"], True, data["notif_photo"])
        
        await callback.message.edit_text(f"‚úÖ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ{dop_text}\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                            reply_markup=adm_inl_panel)
    except Exception as e:
        await callback.message.edit_text("‚ùå–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ <b>–Ω–µ</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n\n–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                                         reply_markup=adm_inl_panel)
        await callback.message.answer(f"‚ö†Ô∏èError: {e}")


@router.callback_query(F.data == "edit_notif_text")
async def edit_notif_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(Notif.edit_text)
    await callback.message.edit_text(f"{text_text_edit}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.edit_text, F.text)
async def save_new_text(message: Message, state: FSMContext):
    await state.update_data(notif_text=message.html_text)
    await message.answer("‚úÖ–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await preview_notification(message, state)

@router.message(Notif.edit_text, ~F.text)
async def not_save_new_text(message: Message):
    await message.answer(f"{error_text_start}{text_text_edit}")


@router.callback_query(F.data == "edit_notif_date")
async def edit_notif_date(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(Notif.edit_date)
    await callback.message.edit_text(f"{date_text_edit}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.edit_date, F.text)
async def save_new_date(message: Message, state: FSMContext):
    if not await valid_date(message.text):
        await message.answer(f"{error_text_date}{date_text_edit}", 
                             reply_markup=adm_inl_cancel)
        return
    await state.update_data(notif_date=message.text)
    await message.answer("‚úÖ–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await preview_notification(message, state)


@router.message(Notif.edit_date, ~F.text)
async def not_save_new_date(message: Message):
    await message.answer(f"{error_text_start}{date_text_edit}", 
                         reply_markup=adm_inl_cancel)


@router.callback_query(F.data == "edit_notif_photo")
async def edit_notif_photo(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Notif.edit_photo)
    await callback.message.edit_text(f"{photo_text_edit}", 
                                     reply_markup=adm_inl_cancel)


@router.message(Notif.edit_photo)
async def save_new_photo(message: Message, state: FSMContext):
    try:
        if message.text and message.text.strip() == "-":
            await state.update_data(notif_photo=None)
        elif message.photo:
            await state.update_data(notif_photo=message.photo[-1].file_id)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except:
        await message.reply(f"{error_text_start}{photo_text_edit}", reply_markup=adm_inl_cancel)
        return
    await message.answer("‚úÖ–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await preview_notification(message, state)

    
async def preview_notification(message_or_callback, state: FSMContext):
    data = await state.get_data()
    await state.set_state(Notif.notif_preview)

    if data["notif_photo"]:
        await message_or_callback.answer_photo(photo=data["notif_photo"], 
                                               caption=data["notif_text"])
    else:
        await message_or_callback.answer(data["notif_text"])

    await message_or_callback.answer(f"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ \n<i>{"–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ" if data['notif_date'] == "0000-00-00 00:00" else data['notif_date']}</i>\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
                                     reply_markup=adm_inl_approveNotif)
